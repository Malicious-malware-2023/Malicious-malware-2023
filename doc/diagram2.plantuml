@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

enum Attack << enumeration >> {
  - Attack(String, Element, int): 
  - name: String
  - element: Element
  - power: int
  + valueOf(String): Attack
  + values(): Attack[]
   name: String
   power: int
   element: Element
}
class BattleScreen {
  + BattleScreen(KaijumonGame): 
  - handleFightButtonEvent(): void
  + dispose(): void
  - handleBagButtonEvent(): void
  - handleKijumonButtonEvent(): void
  + resize(int, int): void
  + hide(): void
  + render(float): void
  + pause(): void
  + show(): void
  + resume(): void
  - handleRunButtonEvent(): void
}
class CollisionMapLoader {
  + CollisionMapLoader(): 
  + getCollisionMap(String): boolean[][]
  + getMapDimensions(String): Point
}
class Consts {
  + Consts(): 
}
class Controller {
  + Controller(KaijumonGame, IModel): 
  + dispose(): void
  - handleInput(): void
  + update(): void
  - moveNpcs(): void
  + playMusic(): void
}
enum Element << enumeration >> {
  - Element(String[], String[], String[]): 
  + values(): Element[]
  + hasNoEffectOn(Element): boolean
  + isNotVeryEffectiveAgainst(Element): boolean
  + valueOf(String): Element
  - contains(String[], Element): boolean
  + isSuperEffectiveAgainst(Element): boolean
}
class GameScreen {
  + GameScreen(KaijumonGame, IView, IController): 
  + render(float): void
  + hide(): void
  + dispose(): void
  + resume(): void
  + resize(int, int): void
  + pause(): void
  + show(): void
}
interface ICollisionMapLoader << interface >> {
  + getMapDimensions(String): Point
  + getCollisionMap(String): boolean[][]
}
interface IController << interface >> {
  + playMusic(): void
  + dispose(): void
  + update(): void
}
interface IEntity << interface >> {
   lastPosition: Point
   y: int
   x: int
   timeSinceLastMove: long
   position: Point
}
interface IModel << interface >> {
  + movePlayer(int, int): void
  + saveModel(): void
   npcList: List<Npc>
   player: Player
   tileMapPath: String
}
interface IMoveBehaviourStrategy << interface >> {
  + move(Point): void
}
interface IView << interface >> {
  + render(float): void
  + dispose(): void
}
class Kaijumon {
  + Kaijumon(String, Stats, Element, List<Attack>): 
  - element: Element
  - stats: Stats
  - name: String
  + getAttack(int): Attack
  + takeDamage(int): void
   name: String
   attacksList: List<Attack>
   element: Element
   stats: Stats
}
class KaijumonGame {
  + KaijumonGame(): 
  + dispose(): void
  + create(): void
  + render(): void
}
class MainMenuScreen {
  + MainMenuScreen(KaijumonGame): 
  + render(float): void
  + resize(int, int): void
  + pause(): void
  - handleNewGameButtonEvent(): void
  - handleLoadGameButtonEvent(): void
  + hide(): void
  + dispose(): void
  + show(): void
  + resume(): void
}
class Model {
  + Model(Player): 
  + Model(Player, boolean[][]): 
  - npcList: List<Npc>
  + player: Player
  + isTileBlocked(int, int): boolean
  + movePlayer(int, int): void
  - createNpcs(): void
  + saveModel(): void
   npcList: List<Npc>
   player: Player
   tileMapPath: String
}
class MoveBehaviourPatrol {
  + MoveBehaviourPatrol(Model, List<Point>): 
  + move(Point): void
}
class MoveBehaviourRandom {
  + MoveBehaviourRandom(Model): 
  + move(Point): void
}
class MoveBehaviourStill {
  + MoveBehaviourStill(Model): 
  + move(Point): void
}
class Npc {
  + Npc(int, int, IMoveBehaviourStrategy): 
  - timeSinceLastMove: long
  - position: Point
  - lastPosition: Point
  + moveNpc(): void
   lastPosition: Point
   y: int
   x: int
   timeSinceLastMove: long
   position: Point
}
class Player {
  + Player(int, int): 
  - position: Point
  - lastPosition: Point
  - timeSinceLastMove: long
  + move(int, int): void
   lastPosition: Point
   y: int
   x: int
   timeSinceLastMove: long
   position: Point
}
class PointsUtil {
  + PointsUtil(): 
  + createPath(List<Point>): List<Point>
  + createPointLine(Point, Point): List<Point>
  + addReturnPoints(List<Point>): List<Point>
}
class Savegame {
  + Savegame(): 
  + saveGame(Player, String): void
  + loadPlayer(String): Player
}
class Stats {
  + Stats(): 
}
class Tile {
  + Tile(float, float): 
}
class View {
  + View(KaijumonGame, IModel): 
  - drawMapForeground(): void
  - worldToScreen(Point): Point
  - calculateEntityPos(IEntity): Point
  + render(float): void
  + dispose(): void
  - drawMapBackground(): void
  - calculateCameraPosition(Point): Vector2
  - drawNpcs(): void
  - drawPlayer(): void
}

Attack                 "1" *-[#595959,plain]-> "element\n1" Element                
BattleScreen           "1" *-[#595959,plain]-> "game\n1" KaijumonGame           
CollisionMapLoader      -[#008200,dashed]-^  ICollisionMapLoader    
Controller              -[#008200,dashed]-^  IController            
Controller             "1" *-[#595959,plain]-> "model\n1" IModel                 
Controller             "1" *-[#595959,plain]-> "game\n1" KaijumonGame           
GameScreen             "1" *-[#595959,plain]-> "controller\n1" IController            
GameScreen             "1" *-[#595959,plain]-> "view\n1" IView                  
GameScreen             "1" *-[#595959,plain]-> "game\n1" KaijumonGame           
Kaijumon               "1" *-[#595959,plain]-> "attacks\n*" Attack                 
Kaijumon               "1" *-[#595959,plain]-> "element\n1" Element                
Kaijumon               "1" *-[#595959,plain]-> "stats\n1" Stats                  
KaijumonGame            -[#595959,dashed]->  MainMenuScreen         : "«create»"
MainMenuScreen          -[#595959,dashed]->  Controller             : "«create»"
MainMenuScreen          -[#595959,dashed]->  GameScreen             : "«create»"
MainMenuScreen         "1" *-[#595959,plain]-> "game\n1" KaijumonGame           
MainMenuScreen          -[#595959,dashed]->  Model                  : "«create»"
MainMenuScreen          -[#595959,dashed]->  Player                 : "«create»"
MainMenuScreen          -[#595959,dashed]->  View                   : "«create»"
Model                   -[#595959,dashed]->  CollisionMapLoader     : "«create»"
Model                   -[#008200,dashed]-^  IModel                 
Model                   -[#595959,dashed]->  MoveBehaviourPatrol    : "«create»"
Model                   -[#595959,dashed]->  MoveBehaviourRandom    : "«create»"
Model                   -[#595959,dashed]->  MoveBehaviourStill     : "«create»"
Model                  "1" *-[#595959,plain]-> "npcList\n*" Npc                    
Model                   -[#595959,dashed]->  Npc                    : "«create»"
Model                  "1" *-[#595959,plain]-> "player\n1" Player                 
MoveBehaviourPatrol     -[#008200,dashed]-^  IMoveBehaviourStrategy 
MoveBehaviourPatrol    "1" *-[#595959,plain]-> "model\n1" Model                  
MoveBehaviourRandom     -[#008200,dashed]-^  IMoveBehaviourStrategy 
MoveBehaviourRandom    "1" *-[#595959,plain]-> "model\n1" Model                  
MoveBehaviourStill      -[#008200,dashed]-^  IMoveBehaviourStrategy 
MoveBehaviourStill     "1" *-[#595959,plain]-> "model\n1" Model                  
Npc                     -[#008200,dashed]-^  IEntity                
Npc                    "1" *-[#595959,plain]-> "moveBehaviour\n1" IMoveBehaviourStrategy 
Player                  -[#008200,dashed]-^  IEntity                
View                   "1" *-[#595959,plain]-> "model\n1" IModel                 
View                    -[#008200,dashed]-^  IView                  
View                   "1" *-[#595959,plain]-> "game\n1" KaijumonGame           
@enduml
